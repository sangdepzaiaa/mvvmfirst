package com.example.myapplication.upsplash.presitation.search

import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.view.View
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.viewmodel.viewModelFactory
import androidx.viewpager2.adapter.FragmentStateAdapter
import com.example.myapplication.Fragments.BaseFragment1WithViewBinding
import com.example.myapplication.databinding.FragmentSearchhBinding
import com.example.myapplication.upsplash.UnsplashServiceLocator
import com.example.myapplication.upsplash.presitation.search.photo.SearchPhotoFragment
import com.example.myapplication.upsplash.presitation.search.user.SearchUserFragment
import com.google.android.material.tabs.TabLayoutMediator


class SearchhFragment:BaseFragment1WithViewBinding<FragmentSearchhBinding>(
    inflateViewBinding = FragmentSearchhBinding::inflate,
){
    private val vm by activityViewModels<SearchViewModel>(
        factoryProducer = {
            viewModelFactory {
                addInitializer(SearchViewModel::class){
                    SearchViewModel(unsplashApiService = UnsplashServiceLocator.unsplashApiService)
                }
            }
        }
    )
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupOnview()
        setupViewpager()
    }

    private fun setupViewpager() {
        binding.run {
            toolbar.setOnClickListener {
                parentFragmentManager.popBackStack()
            }

            searchEditText.addTextChangedListener(object : TextWatcher{
                override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {

                }

                override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
                }

                override fun afterTextChanged(p0: Editable?) {
                    vm.setQueryLivedata(p0.toString())
                }

            })
        }
    }

    private fun setupOnview() {
        binding.viewpager.run {
            adapter = viewpagerAdapter(this@SearchhFragment)

            TabLayoutMediator(
                binding.tablayout,
                this
            ){tab, position ->
                tab.text = when(position){
                    0 -> "photo"
                    1 -> "user"
                    else -> error("error $position" )
                }
            }.attach()
        }
    }
}

class viewpagerAdapter(fragment: Fragment): FragmentStateAdapter(fragment) {
    override fun getItemCount() = 2
    override fun createFragment(position: Int): Fragment {
        return  when(position){
            0 -> SearchPhotoFragment.newInstance()
            1 -> SearchUserFragment.instance()
            else -> error("error $position")
        }
    }
}

//activityViewModels :N√≥ gi√∫p b·∫°n d√πng chung ViewModel gi·ªØa nhi·ªÅu Fragment trong c√πng 1 Activity.
//ViewModel l√∫c n√†y kh√¥ng thu·ªôc Fragment, m√† thu·ªôc Activity ‚Üí m·ªçi Fragment trong Activity ƒë√≥ d√πng
//chung c√πng m·ªôt th·ªÉ hi·ªán (instance).
//
//So s√°nh viewModels vs activityViewModels
//viewModels()	                           activityViewModels()
//ViewModel ch·ªâ s·ªëng trong Fragment	        ViewModel thu·ªôc Activity
//Ch·ªâ d√πng ƒë∆∞·ª£c trong ch√≠nh Fragment ƒë√≥	   C√°c Fragment trong c√πng Activity ƒë·ªÅu d√πng ƒë∆∞·ª£c
//M·ªói Fragment c√≥ instance ri√™ng	           D√πng chung ViewModel gi·ªØa c√°c Fragment
//
//T√¨nh hu·ªëng th·ª±c t·∫ø: V√¨ sao SearchFragment d√πng activityViewModels
//üî∏ M·ª•c ƒë√≠ch: chia s·∫ª d·ªØ li·ªáu t√¨m ki·∫øm (query, k·∫øt qu·∫£) gi·ªØa nhi·ªÅu Fragment.
//üî∏ V√≠ d·ª• UI:
//MainActivity
//‚îî‚îÄ‚îÄ FeedFragment     ‚Üê ch·ªâ hi·ªÉn th·ªã ·∫£nh b√¨nh th∆∞·ªùng
//‚îî‚îÄ‚îÄ SearchFragment   ‚Üê nh·∫≠p query t√¨m ki·∫øm
//‚îî‚îÄ‚îÄ ResultFragment   ‚Üê hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ SearchViewModel
//
//Khi SearchFragment c·∫≠p nh·∫≠t query (searchLiveData.value = "cat"), th√¨ ResultFragment t·ª± ƒë·ªông
//nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ SearchViewModel, v√¨ c·∫£ 2 Fragment ƒëang d√πng chung ViewModel ƒë√≥ t·ª´ activityViewModels.
//
//V√¨ sao FeedFragment kh√¥ng c·∫ßn activityViewModels
//V√¨ FeedFragment kh√¥ng c·∫ßn chia s·∫ª d·ªØ li·ªáu v·ªõi Fragment n√†o kh√°c ‚Üí n√≥ t·ª± khai b√°o ViewModel c·ªßa ri√™ng n√≥
//(viewModels() ho·∫∑c kh√¥ng d√πng g√¨ n·∫øu kh√¥ng c·∫ßn).
//
//Khi n√†o d√πng activityViewModels()?
//T√¨nh hu·ªëng	                                                             C√≥ d√πng activityViewModels?
//Chia s·∫ª k·∫øt qu·∫£ t√¨m ki·∫øm gi·ªØa nhi·ªÅu Fragment	                               ‚úÖ
//Fragment c·∫ßn c·∫≠p nh·∫≠t UI d·ª±a tr√™n d·ªØ li·ªáu chung (gi·ªè h√†ng, ng∆∞·ªùi d√πng‚Ä¶)  	‚úÖ
//Fragment ƒë·ªôc l·∫≠p, d·ªØ li·ªáu ri√™ng	                                            ‚ùå d√πng viewModels() l√† ƒë·ªß
//
//K·∫øt lu·∫≠n
//activityViewModels d√πng khi b·∫°n mu·ªën chia s·∫ª ViewModel gi·ªØa c√°c Fragment trong c√πng Activity.
//
//viewModels d√πng khi m·ªói Fragment t·ª± qu·∫£n l√Ω ViewModel ri√™ng c·ªßa n√≥.
//
//Trong app th·ª±c t·∫ø, t√¨m ki·∫øm, gi·ªè h√†ng, tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p th∆∞·ªùng d√πng activityViewModels.