package com.example.myapplication.upsplash.presitation.feed.collection

import com.example.myapplication.upsplash.data.response.CollectionItemResponse
import com.squareup.moshi.Json

sealed interface FeedCollectionUiState{

    data object FirstPageLoading: FeedCollectionUiState
    data object FirstPageError: FeedCollectionUiState

    data class Content(
        val item: List<CollectionsItem>,
        val currentPage: Int,
        val nextPageState : NextPageState
    ): FeedCollectionUiState

    data class CollectionsItem(
        val id:String,
        val title:String,
        val description: String,
        val photocover: String
    ): FeedCollectionUiState

    enum class NextPageState {
       LOADING,
        NO_MORE_ITEMS,
        IDLE,
        ERROR
    }

}









//sealed interface FeedCollectionUiState{
//    data object FirstPageLoading: FeedCollectionUiState
//    data object FirstPageError: FeedCollectionUiState
//
//    data class Content(
//        val item: List<CollectionsItem>,
//        val currentPage:Int,
//        val nextPageState: NextPageState
//    ): FeedCollectionUiState
//
//
//    data class CollectionsItem (
//        val id: String,
//        val title :String,
//        val des: String ,
//        val photocover:String ,
//    )
//
//    enum class NextPageState {
//        LOADING,
//        IDLE,
//        NO_MORE_ITEMS,
//        ERROR
//
//    }
//
//}



////sealed interface FeedCollectionUiState
////L√† ki·ªÉu cha t·ªïng qu√°t cho t·∫•t c·∫£ c√°c tr·∫°ng th√°i giao di·ªán (UI state)
//// m√† Fragment ho·∫∑c Activity c·∫ßn bi·∫øt ƒë·ªÉ v·∫Ω giao di·ªán ƒë√∫ng.
//sealed interface FeedCollectionUiState {
//    //data object singeton object tr·∫°ng tha√≠ duy nh·∫•t
////    ƒê·∫°i di·ªán cho tr·∫°ng th√°i:
////    App ƒëang t·∫£i d·ªØ li·ªáu trang ƒë·∫ßu ti√™n (th∆∞·ªùng l√† l·∫ßn ƒë·∫ßu m·ªü m√†n h√¨nh).
////    D√πng ƒë·ªÉ hi·ªÉn th·ªã: loading spinner, progress bar...
//
//    //    kh√¥ng khai b√°o : FeedCollectionUiState, th√¨:
////    N√≥ kh√¥ng ph·∫£i l√† m·ªôt subtype c·ªßa FeedCollectionUiState.
////    Do ƒë√≥, khi b·∫°n g√µ FeedCollectionUiState. ‚Üí n√≥ s·∫Ω kh√¥ng hi·ªán ra SomethingElse.
////    V√† b·∫°n c≈©ng kh√¥ng th·ªÉ d√πng n√≥ trong when(uiState), v√¨ kh√¥ng ph·∫£i l√† m·ªôt FeedCollectionUiState.
////Khi b·∫°n g√µ FeedCollectionUiState., IDE (Android Studio) s·∫Ω hi·ªÉn th·ªã g·ª£i √Ω
//// nh·ªØng ƒë·ªëi t∆∞·ª£ng k·∫ø th·ª´a n√≥ trong c√πng file.
//    data object FirstPageLoading : FeedCollectionUiState
//
//    //    ƒê·∫°i di·ªán cho tr·∫°ng th√°i:
////    T·∫£i trang ƒë·∫ßu ti√™n b·ªã l·ªói (m·∫•t m·∫°ng, l·ªói server,...).
////    App n√™n hi·ªÉn th·ªã: th√¥ng b√°o l·ªói, n√∫t "Th·ª≠ l·∫°i".
//    data object FirstPageError : FeedCollectionUiState
//
//    //    ƒê·∫°i di·ªán cho tr·∫°ng th√°i:
////    ƒê√£ t·∫£i th√†nh c√¥ng d·ªØ li·ªáu.
////    Ch·ª©a:
////    item: danh s√°ch ƒë·ªÉ hi·ªÉn th·ªã trong RecyclerView.
////    currentPage: ƒëang ·ªü trang n√†o.
////    nextPageState: ƒëang t·∫£i th√™m hay kh√¥ng, c√≥ l·ªói kh√¥ng, c√≤n d·ªØ li·ªáu kh√¥ng?
//    data class Content(
//        val item: List<CollectionItem>,
//        val currentPage: Int,
//        val nextPageState: NextPageState
//    ) : FeedCollectionUiState
//    //: FeedCollectionUiState d√πng khi Khi tr·∫°ng th√°i ph·ª©c t·∫°p, c√≥ th·ªÉ mang d·ªØ li·ªáu ri√™ng
//
//    // c·∫•u tr√∫c d·ªØ li·ªáu
//    data class CollectionItem(
//        // b·ªè CollectionItem2
//        val id: String,
//        val title: String,
//        val des: String,
//        val coverPhoto: String,
//    )
//
//    //enum class trong Kotlin ƒë∆∞·ª£c d√πng ƒë·ªÉ khai b√°o m·ªôt t·∫≠p h·ª£p h·∫±ng s·ªë ƒë·ªãnh danh c√≥ √Ω nghƒ©a c·ª• th·ªÉ.
//// M·ªói ph·∫ßn t·ª≠ trong enum l√† m·ªôt ƒë·ªëi t∆∞·ª£ng duy nh·∫•t, d√πng ƒë·ªÉ bi·ªÉu di·ªÖn tr·∫°ng th√°i, l·ª±a ch·ªçn, lo·∫°i...
//    // enum d√πng khi ch·ªâ c√≥ danh s√°ch gi√° tr·ªã ƒë∆°n gi·∫£n, c·ªë ƒë·ªãnh
//    enum class NextPageState {
//        LOADING,
//        ERROR,
//        IDLE,
//        NO_MORE_ITEMS
//    }
////    ƒêi·ªÉm kh√°c nhau	             enum class	                                  sealed interface / sealed class (v√≠ d·ª•: FeedCollectionUiState)
////    ‚úÖ D√πng khi n√†o?	Khi ch·ªâ c√≥ danh s√°ch gi√° tr·ªã ƒë∆°n gi·∫£n, c·ªë ƒë·ªãnh	       Khi tr·∫°ng th√°i ph·ª©c t·∫°p, c√≥ th·ªÉ mang d·ªØ li·ªáu ri√™ng
////    üéØ C√≥ mang d·ªØ li·ªáu ri√™ng kh√¥ng?	C√≥ th·ªÉ, nh∆∞ng h·∫°n ch·∫ø	                     R·∫•t linh ho·∫°t: m·ªói subclass c√≥ th·ªÉ ch·ª©a d·ªØ li·ªáu ri√™ng
////    ü§ñ G·ª£i √Ω IDE / when exhaustive	C√≥	                                             C√≥
////    üß† Kh·∫£ nƒÉng m·ªü r·ªông	Kh√≥ m·ªü r·ªông ‚Äì ph·∫£i s·ª≠a enum g·ªëc	                           D·ªÖ m·ªü r·ªông ‚Äì ch·ªâ c·∫ßn th√™m subclass
////    üì¶ T√≠nh k·∫ø th·ª´a	Enum kh√¥ng k·∫ø th·ª´a nhau	                                           Sealed interface cho ph√©p ƒëa k·∫ø th·ª´a (interface)
////    üìò V√≠ d·ª• trong code b·∫°n	NextPageState ch·ªâ c√≥ LOADING, ERROR, IDLE, NO_MORE_ITEMS	FeedCollectionUiState c√≥ c√°c tr·∫°ng th√°i kh√°c nhau v√† Content c√≥ th√™m d·ªØ li·ªáu
//
////    | √ù mu·ªën                                                     | D√πng g√¨                                |
////    | ---------------------------------------------------------- | -------------------------------------- |
////    | Bi·ªÉu di·ªÖn **danh s√°ch tr·∫°ng th√°i ƒë∆°n gi·∫£n**                | `enum class`                           |
////    | Bi·ªÉu di·ªÖn **tr·∫°ng th√°i UI ph·ª©c t·∫°p, c√≥ d·ªØ li·ªáu kh√°c nhau** | `sealed class` ho·∫∑c `sealed interface` |
////v√≠ d·ª•
//    //‚Üí M·ªói tr·∫°ng th√°i l√† m·ªôt lo·∫°i d·ªØ li·ªáu ri√™ng:
////    FirstPageLoading: kh√¥ng ch·ª©a g√¨
////
////    Content: ch·ª©a item, currentPage, nextPageState
////
////    ‚û° B·∫°n kh√¥ng th·ªÉ l√†m ƒëi·ªÅu n√†y b·∫±ng enum v√¨ enum kh√¥ng cho t·ª´ng ph·∫ßn t·ª≠ c√≥ ki·ªÉu d·ªØ li·ªáu kh√°c nhau.
//    //L√† t·∫≠p h·ª£p tr·∫°ng th√°i ƒë∆°n gi·∫£n, kh√¥ng k√®m nhi·ªÅu logic hay d·ªØ li·ªáu. ƒê·ªß d√πng cho tr·∫°ng th√°i ph√¢n trang.
//}

